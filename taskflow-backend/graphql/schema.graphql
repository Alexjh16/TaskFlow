"A datetime string with format `Y-m-d H:i:s`, e.g. `2018-05-23 13:43:32`."
scalar DateTime @scalar(class: "Nuwave\\Lighthouse\\Schema\\Types\\Scalars\\DateTime")

"Indicates what fields are available at the top level of a query operation."
type Query {
    "1. Obtener todas las categorías"
    categories: [Category!]! @all

    "2. Obtener todas las tareas"
    tasks: [Task!]! @all

    "3. Obtener una tarea por ID (equivalente a GET /tasks/{id})"
    task(id: ID! @eq): Task @find

    "Find a single user by an identifying attribute."
    user(
      "Search by primary key."
      id: ID @eq @rules(apply: ["prohibits:email", "required_without:email"])

      "Search by email address."
      email: String @eq @rules(apply: ["prohibits:id", "required_without:id", "email"])
    ): User @find

    "List multiple users."
    users(
      "Filters by name. Accepts SQL LIKE wildcards `%` and `_`."
      name: String @where(operator: "like")
    ): [User!]! @paginate(defaultCount: 10)
}

"Account of a person who uses this application."
type User {
    "Unique primary key."
    id: ID!

    "Non-unique name."
    name: String!

    "Unique email address."
    email: String!

    "When the email was verified."
    email_verified_at: DateTime

    "When the account was created."
    created_at: DateTime!

    "When the account was last updated."
    updated_at: DateTime!
}

"Definición del tipo Categoría"
type Category {
  id: ID!
  name: String!
  created_at: DateTime!
  updated_at: DateTime!

  "Relación una Categoría tiene muchas Tareas"
  tasks: [Task!] @hasMany
}

"Definición del tipo Tarea"
type Task{
  id: ID!
  category_id: ID!
  title: String!
  description: String!
  is_completed: Boolean!
  created_at: DateTime!
  updated_at: DateTime!

  "Relación una Tarea pertenece a una Categoría"
  category: Category! @belongsTo
}

"Crear o actualizar una tarea"
input CreateTaskInput {
  category_id: ID!
  title: String!
  description: String!
}

"Definir las acciones que modifican los datos CRUD"
type Mutation {
    "Crear una nueva tarea"
    createTask(input: CreateTaskInput! @spread): Task
     @create(model: "App\\Models\\Task")

     "Crear una nueva categoría"
     createCategory(name: String!): Category
      @create(model: "App\\Models\\Category")
}